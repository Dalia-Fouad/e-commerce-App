import{g as d}from"./chunk-ZARZFIJP.js";import{Bc as a,T as p,Z as l,wc as u}from"./chunk-VV2C2VWU.js";var s=class extends Error{};s.prototype.name="InvalidTokenError";function g(r){return decodeURIComponent(atob(r).replace(/(.)/g,(t,o)=>{let e=o.charCodeAt(0).toString(16).toUpperCase();return e.length<2&&(e="0"+e),"%"+e}))}function h(r){let t=r.replace(/-/g,"+").replace(/_/g,"/");switch(t.length%4){case 0:break;case 2:t+="==";break;case 3:t+="=";break;default:throw new Error("base64 string is not of the correct length")}try{return g(t)}catch{return atob(t)}}function c(r,t){if(typeof r!="string")throw new s("Invalid token specified: must be a string");t||(t={});let o=t.header===!0?0:1,e=r.split(".")[o];if(typeof e!="string")throw new s(`Invalid token specified: missing part #${o+1}`);let n;try{n=h(e)}catch(i){throw new s(`Invalid token specified: invalid base64 for part #${o+1} (${i.message})`)}try{return JSON.parse(n)}catch(i){throw new s(`Invalid token specified: invalid json for part #${o+1} (${i.message})`)}}var D=(()=>{let t=class t{constructor(){this._HttpClient=l(u),this._Router=l(d)}setRegisterForm(e){return this._HttpClient.post(`${a.baseUrl}/api/v1/auth/signup`,e)}setloginForm(e){return this._HttpClient.post(`${a.baseUrl}/api/v1/auth/signin`,e)}saveUserData(){localStorage.getItem("userToken")!==null&&(this.userData=c(localStorage.getItem("userToken"))),console.log("user data"),console.log(this.userData)}getUserData(){return localStorage.getItem("userToken")!==null&&(this.userData=c(localStorage.getItem("userToken"))),console.log("user data"),console.log(this.userData.id),this.userData.id}logout(){localStorage.removeItem("userToken"),this.userData=null,this._Router.navigate(["/login"])}forgotPassword(e){return this._HttpClient.post(`${a.baseUrl}/api/v1/auth/forgotPasswords`,e)}verifyResetCode(e){return this._HttpClient.post(`${a.baseUrl}/api/v1/auth/verifyResetCode`,e)}resetPassword(e){return this._HttpClient.put(`${a.baseUrl}/api/v1/auth/resetPassword`,e)}};t.\u0275fac=function(n){return new(n||t)},t.\u0275prov=p({token:t,factory:t.\u0275fac,providedIn:"root"});let r=t;return r})();export{D as a};
